---
http_interactions:
- request:
    method: get
    uri: https://api.themoviedb.org/3/movie/155/reviews?api_key=tmdb>
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.7.12
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json;charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - openresty
      X-Memc:
      - HIT
      X-Memc-Key:
      - 5c69b6a9d5dcfbf6656eec87bdbdf927
      X-Memc-Age:
      - '14595'
      X-Memc-Expires:
      - '7911'
      Date:
      - Sat, 02 Dec 2023 00:01:11 GMT
      Etag:
      - W/"27bb98e8293b27fc47f706a56b57d297"
      Vary:
      - Accept-Encoding
      - Origin
      X-Cache:
      - RefreshHit from cloudfront
      Via:
      - 1.1 e8f78324e5bfcb2604bfdbcc16db2a58.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - ATL56-P2
      Alt-Svc:
      - h3=":443"; ma=86400
      X-Amz-Cf-Id:
      - 0fiQS73gmUjE4-I8LbQ4_LgvxTeY5D99m8b-lCw-ft6VuaFb7h8eGw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 02 Dec 2023 00:01:11 GMT
- request:
    method: get
    uri: https://api.themoviedb.org/3/movie/155/reviews?api_key=tmdb>
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.7.12
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json;charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - openresty
      X-Memc:
      - HIT
      X-Memc-Key:
      - 5c69b6a9d5dcfbf6656eec87bdbdf927
      X-Memc-Age:
      - '14595'
      X-Memc-Expires:
      - '7911'
      Date:
      - Sat, 02 Dec 2023 01:30:18 GMT
      Etag:
      - W/"27bb98e8293b27fc47f706a56b57d297"
      Vary:
      - Accept-Encoding
      - Origin
      X-Cache:
      - RefreshHit from cloudfront
      Via:
      - 1.1 52cf696b7d467b009c1bb9273fc4081c.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - ATL58-P2
      Alt-Svc:
      - h3=":443"; ma=86400
      X-Amz-Cf-Id:
      - x6spNOgUND3XfJDFy4srOQjVeFsATsvCYYL2E-_522FEFfo8SAp0gA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 02 Dec 2023 01:30:18 GMT
recorded_with: VCR 6.2.0
